(define (over-or-under num1 num2)
    (cond ((< num1 num2) -1)
        ((= num1 num2) 0)
        (else 1)
        )
    )

(define (composed f g)
    (lambda(x) (f(g x)))
    )

(define (square n) (* n n))

(define (pow base exp)
    (cond (   (= exp 0) 1   )
        (   (even? exp) (square (pow base (/ exp 2)))   )
        (  else (* base (square (pow base (/ (- exp 1) 2))))  )
    )
)

(define (ascending? lst)
    (cond ((= 1 (length lst)) #t)
        ((<= (car lst) (car (cdr lst))) (ascending? (cdr lst)))
        (else #f)
        )
    )
